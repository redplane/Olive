<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DoctorDoesNotExist" xml:space="preserve">
    <value>Doctor doesn't exist</value>
  </data>
  <data name="DoctorExisted" xml:space="preserve">
    <value>Doctor has existed in database</value>
  </data>
  <data name="FindResultConflict" xml:space="preserve">
    <value>Result isn't unique</value>
  </data>
  <data name="IdentityCardInUse" xml:space="preserve">
    <value>Identity card is in use</value>
  </data>
  <data name="InvalidAccountStatus" xml:space="preserve">
    <value>Account status is invalid</value>
  </data>
  <data name="InvalidAddress" xml:space="preserve">
    <value>Address is invalid</value>
  </data>
  <data name="InvalidBirthday" xml:space="preserve">
    <value>Birthday is invalid</value>
  </data>
  <data name="InvalidEmailFormat" xml:space="preserve">
    <value>Email format is incorret</value>
  </data>
  <data name="InvalidEmailMaximumLength" xml:space="preserve">
    <value>Email can only contains {1} character(s)</value>
  </data>
  <data name="InvalidFirstName" xml:space="preserve">
    <value>First name can only contains {1} character(s)</value>
  </data>
  <data name="InvalidGender" xml:space="preserve">
    <value>Gender is invalid</value>
  </data>
  <data name="InvalidHeight" xml:space="preserve">
    <value>Height can only be fromt {1} to {2} cm(s)</value>
  </data>
  <data name="InvalidIdentityCard" xml:space="preserve">
    <value>Identity card can only contain {0} number(s)</value>
  </data>
  <data name="InvalidIdentityCardMaxLength" xml:space="preserve">
    <value>Identity card can only contains {1} number(s)</value>
  </data>
  <data name="InvalidLastName" xml:space="preserve">
    <value>Last name can only contains {1} characters(s)</value>
  </data>
  <data name="InvalidLoginInfo" xml:space="preserve">
    <value>Invalid account or password</value>
  </data>
  <data name="InvalidMaxBirthday" xml:space="preserve">
    <value>Max birthday is invalid</value>
  </data>
  <data name="InvalidMaxDate" xml:space="preserve">
    <value>Max date is invalid</value>
  </data>
  <data name="InvalidMinBirthday" xml:space="preserve">
    <value>Min birthday is invalid</value>
  </data>
  <data name="InvalidMinDate" xml:space="preserve">
    <value>Min date is invalid</value>
  </data>
  <data name="InvalidNoteId" xml:space="preserve">
    <value>Note ID is invalid</value>
  </data>
  <data name="InvalidPageIndex" xml:space="preserve">
    <value>Page index must be from 0</value>
  </data>
  <data name="InvalidPageRecords" xml:space="preserve">
    <value>Records must be from {1} to {2}</value>
  </data>
  <data name="InvalidPersonalId" xml:space="preserve">
    <value>Id is invalid</value>
  </data>
  <data name="InvalidPhone" xml:space="preserve">
    <value>Phone number can only contain numeric character(s)</value>
  </data>
  <data name="InvalidSpecializationLength" xml:space="preserve">
    <value>Speciality can only contains {0} character(s)</value>
  </data>
  <data name="InvalidTemperature" xml:space="preserve">
    <value>Temperature is invalid</value>
  </data>
  <data name="InvalidWeight" xml:space="preserve">
    <value>Weight can only be from {1} to {2} kg(s)</value>
  </data>
  <data name="MustAuthorize" xml:space="preserve">
    <value>You must be authorized to access this function</value>
  </data>
  <data name="RequestForbidden" xml:space="preserve">
    <value>You are forbidden to access this function</value>
  </data>
  <data name="RequireAddress" xml:space="preserve">
    <value>Address is required</value>
  </data>
  <data name="RequireBirthday" xml:space="preserve">
    <value>Birthday is required</value>
  </data>
  <data name="RequireEmail" xml:space="preserve">
    <value>Email is required</value>
  </data>
  <data name="RequireFirstName" xml:space="preserve">
    <value>First name is required</value>
  </data>
  <data name="RequireIdentityCard" xml:space="preserve">
    <value>Identity card is required</value>
  </data>
  <data name="RequireLastName" xml:space="preserve">
    <value>Last name is required</value>
  </data>
  <data name="RequirePassword" xml:space="preserve">
    <value>Password is required</value>
  </data>
  <data name="RequirePersonalId" xml:space="preserve">
    <value>Id is required</value>
  </data>
  <data name="RequirePhone" xml:space="preserve">
    <value>Phone number is required</value>
  </data>
  <data name="RequireSpecialization" xml:space="preserve">
    <value>Specialization is required</value>
  </data>
</root>